datatable = readtable("org_full.csv");
datamatrix = readmatrix("org_full.csv");
datamatrix = datamatrix(1:end-1,3:end);
datamatrix(33,126) = 3875;
datamatrix(105,:) = [];

topLabels = datatable.Properties.VariableNames;
indiceofrecovery = find(strcmp(topLabels, 'x_Count_Recovery_'))-2;
indiceofreferral = find(strcmp(topLabels, 'x_Count_ReferralsReceived_'))-2;
RecoveryRate = (datamatrix(:, indiceofrecovery)./datamatrix(:,indiceofreferral)).*100;



indiceofY = find(strcmp(topLabels, 'x_Count_Recovery_'))-2;
featureIndices = setdiff(1:size(datamatrix, 2), indiceofY);
outputIndex = indiceofY;


cv = cvpartition(size(datamatrix, 1), 'Holdout', 0.2);
trainIndices = training(cv);
testIndices = test(cv);


X_train = datamatrix(trainIndices, featureIndices);
Y_train = RecoveryRate(trainIndices);

X_test = datamatrix(testIndices, featureIndices);
Y_test = RecoveryRate(testIndices);
testorgcodes = datatable(testIndices, "ORG_NAME1");


treeModel = fitrlinear(X_train, Y_train);


predicted = predict(treeModel, X_test);
error = abs(predicted - Y_test);

% 
% view(treeModel, 'Mode', 'graph');

% Plot results
        
y = transpose(Y_test);
x = 1:length(predicted);
predicted = transpose(predicted);


hold on 

% errorbar(x-1, predicted, error,'x', 'Linewidth', 1)
plot(x-1, predicted,'x', 'Linewidth', 2)

plot(x-1,y,'o', 'Linewidth', 2)
ylabel('Recovery rate %')
xticks(0:28)
xticklabels(table2array(testorgcodes))
legend('Predicted Recovery Count', 'Actual Recovery Count')
title("Decison tree predicted recovery rates vs true recovery rates of organisations")
grid on
hold off




importanceScores = predictorImportance(treeModel);
disp('Predictor Importance Scores:');
disp(importanceScores);


[sortedImportance, sortedIndices] = sort(importanceScores, 'descend');
topN = 10; 
mostimportantfeatures = transpose(topLabels(featureIndices(sortedIndices(1:topN))+2));
disp(['Top ' num2str(topN) ' Important Features:']);
disp(topLabels(featureIndices(sortedIndices(1:topN))));
